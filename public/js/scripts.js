/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["/js/scripts"],{

/***/ "./resources/js/scripts.js":
/*!*********************************!*\
  !*** ./resources/js/scripts.js ***!
  \*********************************/
/***/ (() => {

eval("function _defineEnumerableProperties(obj, descs) { for (var key in descs) { var desc = descs[key]; desc.configurable = desc.enumerable = true; if (\"value\" in desc) desc.writable = true; Object.defineProperty(obj, key, desc); } if (Object.getOwnPropertySymbols) { var objectSymbols = Object.getOwnPropertySymbols(descs); for (var i = 0; i < objectSymbols.length; i++) { var sym = objectSymbols[i]; var desc = descs[sym]; desc.configurable = desc.enumerable = true; if (\"value\" in desc) desc.writable = true; Object.defineProperty(obj, sym, desc); } } return obj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nwindow.Components = {}, window.Components.listbox = function (e) {\n  var _ref, _objectSpread2, _mutatorMap;\n\n  return _objectSpread((_objectSpread2 = {\n    init: function init() {\n      var _this = this;\n\n      this.optionCount = this.$refs.listbox.children.length, this.$watch(\"activeIndex\", function (e) {\n        _this.open && (null !== _this.activeIndex ? _this.activeDescendant = _this.$refs.listbox.children[_this.activeIndex].id : _this.activeDescendant = \"\");\n      });\n    },\n    activeDescendant: null,\n    optionCount: null,\n    open: !1,\n    activeIndex: null,\n    selectedIndex: 0,\n\n    get active() {\n      return this.items[this.activeIndex];\n    }\n\n  }, _ref = e.modelName || \"selected\", _mutatorMap = {}, _mutatorMap[_ref] = _mutatorMap[_ref] || {}, _mutatorMap[_ref].get = function () {\n    return this.items[this.selectedIndex];\n  }, _defineProperty(_objectSpread2, \"choose\", function choose(e) {\n    this.selectedIndex = e, this.open = !1;\n  }), _defineProperty(_objectSpread2, \"onButtonClick\", function onButtonClick() {\n    var _this2 = this;\n\n    this.open || (this.activeIndex = this.selectedIndex, this.open = !0, this.$nextTick(function () {\n      _this2.$refs.listbox.focus(), _this2.$refs.listbox.children[_this2.activeIndex].scrollIntoView({\n        block: \"nearest\"\n      });\n    }));\n  }), _defineProperty(_objectSpread2, \"onOptionSelect\", function onOptionSelect() {\n    null !== this.activeIndex && (this.selectedIndex = this.activeIndex), this.open = !1, this.$refs.button.focus();\n  }), _defineProperty(_objectSpread2, \"onEscape\", function onEscape() {\n    this.open = !1, this.$refs.button.focus();\n  }), _defineProperty(_objectSpread2, \"onArrowUp\", function onArrowUp() {\n    this.activeIndex = this.activeIndex - 1 < 0 ? this.optionCount - 1 : this.activeIndex - 1, this.$refs.listbox.children[this.activeIndex].scrollIntoView({\n      block: \"nearest\"\n    });\n  }), _defineProperty(_objectSpread2, \"onArrowDown\", function onArrowDown() {\n    this.activeIndex = this.activeIndex + 1 > this.optionCount - 1 ? 0 : this.activeIndex + 1, this.$refs.listbox.children[this.activeIndex].scrollIntoView({\n      block: \"nearest\"\n    });\n  }), _defineEnumerableProperties(_objectSpread2, _mutatorMap), _objectSpread2), e);\n}, window.Components.menu = function () {\n  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    open: !1\n  };\n  return {\n    init: function init() {\n      var _this3 = this;\n\n      this.items = Array.from(this.$el.querySelectorAll('[role=\"menuitem\"]')), this.$watch(\"open\", function () {\n        _this3.open && (_this3.activeIndex = -1);\n      });\n    },\n    activeDescendant: null,\n    activeIndex: null,\n    items: null,\n    open: e.open,\n    focusButton: function focusButton() {\n      this.$refs.button.focus();\n    },\n    onButtonClick: function onButtonClick() {\n      var _this4 = this;\n\n      this.open = !this.open, this.open && this.$nextTick(function () {\n        _this4.$refs[\"menu-items\"].focus();\n      });\n    },\n    onButtonEnter: function onButtonEnter() {\n      var _this5 = this;\n\n      this.open = !this.open, this.open && (this.activeIndex = 0, this.activeDescendant = this.items[this.activeIndex].id, this.$nextTick(function () {\n        _this5.$refs[\"menu-items\"].focus();\n      }));\n    },\n    onArrowUp: function onArrowUp() {\n      if (!this.open) return this.open = !0, this.activeIndex = this.items.length - 1, void (this.activeDescendant = this.items[this.activeIndex].id);\n      0 !== this.activeIndex && (this.activeIndex = -1 === this.activeIndex ? this.items.length - 1 : this.activeIndex - 1, this.activeDescendant = this.items[this.activeIndex].id);\n    },\n    onArrowDown: function onArrowDown() {\n      if (!this.open) return this.open = !0, this.activeIndex = 0, void (this.activeDescendant = this.items[this.activeIndex].id);\n      this.activeIndex !== this.items.length - 1 && (this.activeIndex = this.activeIndex + 1, this.activeDescendant = this.items[this.activeIndex].id);\n    },\n    onClickAway: function onClickAway(e) {\n      if (this.open) {\n        var t = [\"[contentEditable=true]\", \"[tabindex]\", \"a[href]\", \"area[href]\", \"button:not([disabled])\", \"iframe\", \"input:not([disabled])\", \"select:not([disabled])\", \"textarea:not([disabled])\"].map(function (e) {\n          return \"\".concat(e, \":not([tabindex='-1'])\");\n        }).join(\",\");\n        this.open = !1, e.target.closest(t) || this.focusButton();\n      }\n    }\n  };\n}, window.Components.popoverGroup = function () {\n  return {\n    __type: \"popoverGroup\",\n    init: function init() {\n      var _this6 = this;\n\n      var e = function e(t) {\n        document.body.contains(_this6.$el) ? t.target instanceof Element && !_this6.$el.contains(t.target) && window.dispatchEvent(new CustomEvent(\"close-popover-group\", {\n          detail: _this6.$el\n        })) : window.removeEventListener(\"focus\", e, !0);\n      };\n\n      window.addEventListener(\"focus\", e, !0);\n    }\n  };\n}, window.Components.popover = function () {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref2$open = _ref2.open,\n      e = _ref2$open === void 0 ? !1 : _ref2$open,\n      _ref2$focus = _ref2.focus,\n      t = _ref2$focus === void 0 ? !1 : _ref2$focus;\n\n  var i = [\"[contentEditable=true]\", \"[tabindex]\", \"a[href]\", \"area[href]\", \"button:not([disabled])\", \"iframe\", \"input:not([disabled])\", \"select:not([disabled])\", \"textarea:not([disabled])\"].map(function (e) {\n    return \"\".concat(e, \":not([tabindex='-1'])\");\n  }).join(\",\");\n  return {\n    __type: \"popover\",\n    open: e,\n    init: function init() {\n      var _this7 = this;\n\n      t && this.$watch(\"open\", function (e) {\n        e && _this7.$nextTick(function () {\n          !function (e) {\n            var t = Array.from(e.querySelectorAll(i));\n            !function e(i) {\n              void 0 !== i && (i.focus({\n                preventScroll: !0\n              }), document.activeElement !== i && e(t[t.indexOf(i) + 1]));\n            }(t[0]);\n          }(_this7.$refs.panel);\n        });\n      });\n\n      var e = function e(i) {\n        if (!document.body.contains(_this7.$el)) return void window.removeEventListener(\"focus\", e, !0);\n        var n = t ? _this7.$refs.panel : _this7.$el;\n\n        if (_this7.open && i.target instanceof Element && !n.contains(i.target)) {\n          var _e = _this7.$el;\n\n          for (; _e.parentNode;) {\n            if (_e = _e.parentNode, _e.__x instanceof _this7.constructor) {\n              if (\"popoverGroup\" === _e.__x.$data.__type) return;\n              if (\"popover\" === _e.__x.$data.__type) break;\n            }\n          }\n\n          _this7.open = !1;\n        }\n      };\n\n      window.addEventListener(\"focus\", e, !0);\n    },\n    onEscape: function onEscape() {\n      this.open = !1, this.restoreEl && this.restoreEl.focus();\n    },\n    onClosePopoverGroup: function onClosePopoverGroup(e) {\n      e.detail.contains(this.$el) && (this.open = !1);\n    },\n    toggle: function toggle(e) {\n      this.open = !this.open, this.open ? this.restoreEl = e.currentTarget : this.restoreEl && this.restoreEl.focus();\n    }\n  };\n}, window.Components.radioGroup = function () {\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref3$initialCheckedI = _ref3.initialCheckedIndex,\n      e = _ref3$initialCheckedI === void 0 ? 0 : _ref3$initialCheckedI;\n\n  return {\n    value: void 0,\n    active: void 0,\n    init: function init() {\n      var _t$e,\n          _this8 = this;\n\n      var t = Array.from(this.$el.querySelectorAll(\"input\"));\n      this.value = (_t$e = t[e]) === null || _t$e === void 0 ? void 0 : _t$e.value;\n\n      var _loop = function _loop() {\n        var e = _t[_i];\n        e.addEventListener(\"change\", function () {\n          _this8.active = e.value;\n        }), e.addEventListener(\"focus\", function () {\n          _this8.active = e.value;\n        });\n      };\n\n      for (var _i = 0, _t = t; _i < _t.length; _i++) {\n        _loop();\n      }\n\n      window.addEventListener(\"focus\", function () {\n        console.log(\"Focus change\"), t.includes(document.activeElement) || (console.log(\"HIT\"), _this8.active = void 0);\n      }, !0);\n    }\n  };\n}, window.Components.tabs = function () {\n  return {\n    selectedIndex: 0,\n    onTabClick: function onTabClick(e) {\n      if (!this.$el.contains(e.detail)) return;\n      var t = Array.from(this.$el.querySelectorAll('[x-data^=\"Components.tab(\"]')),\n          i = Array.from(this.$el.querySelectorAll('[x-data^=\"Components.tabPanel(\"]')),\n          n = t.indexOf(e.detail);\n      this.selectedIndex = n, window.dispatchEvent(new CustomEvent(\"tab-select\", {\n        detail: {\n          tab: e.detail,\n          panel: i[n]\n        }\n      }));\n    },\n    onTabKeydown: function onTabKeydown(e) {\n      if (!this.$el.contains(e.detail.tab)) return;\n      var t = Array.from(this.$el.querySelectorAll('[x-data^=\"Components.tab(\"]')),\n          i = t.indexOf(e.detail.tab);\n      \"ArrowLeft\" === e.detail.key ? this.onTabClick({\n        detail: t[(i - 1 + t.length) % t.length]\n      }) : \"ArrowRight\" === e.detail.key ? this.onTabClick({\n        detail: t[(i + 1) % t.length]\n      }) : \"Home\" === e.detail.key || \"PageUp\" === e.detail.key ? this.onTabClick({\n        detail: t[0]\n      }) : \"End\" !== e.detail.key && \"PageDown\" !== e.detail.key || this.onTabClick({\n        detail: t[t.length - 1]\n      });\n    }\n  };\n}, window.Components.tab = function () {\n  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return {\n    selected: !1,\n    init: function init() {\n      var _this9 = this;\n\n      var t = Array.from(this.$el.closest('[x-data^=\"Components.tabs(\"]').querySelectorAll('[x-data^=\"Components.tab(\"]'));\n      this.selected = t.indexOf(this.$el) === e, this.$watch(\"selected\", function (e) {\n        e && _this9.$el.focus();\n      });\n    },\n    onClick: function onClick() {\n      window.dispatchEvent(new CustomEvent(\"tab-click\", {\n        detail: this.$el\n      }));\n    },\n    onKeydown: function onKeydown(e) {\n      [\"ArrowLeft\", \"ArrowRight\", \"Home\", \"PageUp\", \"End\", \"PageDown\"].includes(e.key) && e.preventDefault(), window.dispatchEvent(new CustomEvent(\"tab-keydown\", {\n        detail: {\n          tab: this.$el,\n          key: e.key\n        }\n      }));\n    },\n    onTabSelect: function onTabSelect(e) {\n      this.selected = e.detail.tab === this.$el;\n    }\n  };\n}, window.Components.tabPanel = function () {\n  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return {\n    selected: !1,\n    init: function init() {\n      var t = Array.from(this.$el.closest('[x-data^=\"Components.tabs(\"]').querySelectorAll('[x-data^=\"Components.tabPanel(\"]'));\n      this.selected = t.indexOf(this.$el) === e;\n    },\n    onTabSelect: function onTabSelect(e) {\n      this.selected = e.detail.panel === this.$el;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/scripts.js\n");

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./resources/js/scripts.js"));
/******/ }
]);